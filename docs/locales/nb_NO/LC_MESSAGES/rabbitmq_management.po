# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2020, The Royal Marsden NHS Foundation Trust
# This file is distributed under the same license as the OpenREM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: OpenREM 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-01 18:30+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../rabbitmq_management.rst:2
msgid "Task management"
msgstr ""

#: ../../rabbitmq_management.rst:3
msgid "*New in 0.9*"
msgstr ""

#: ../../rabbitmq_management.rst:5
msgid "Contents"
msgstr ""

#: ../../rabbitmq_management.rst:8
msgid "Enabling RabbitMQ management"
msgstr ""

#: ../../rabbitmq_management.rst:10
msgid ""
"Installation instructions were added in 0.9.0. Users upgrading from "
"previous versions should review :ref:`enableRabbitMQ`."
msgstr ""

#: ../../rabbitmq_management.rst:15
msgid "Viewing task and service statuses"
msgstr ""

#: ../../rabbitmq_management.rst:22
msgid "Figure 1: The ``Config`` menu (user and admin)"
msgstr ""

#: ../../rabbitmq_management.rst:24
msgid ""
"Users who are logged in with admin rights can use the **Config** menu and"
" choose **Tasks** to see the following:"
msgstr ""

#: ../../rabbitmq_management.rst:26
msgid "The status of the task message broker, RabbitMQ"
msgstr ""

#: ../../rabbitmq_management.rst:27
msgid "The status of the asynchronous task queue, Celery"
msgstr ""

#: ../../rabbitmq_management.rst:28
msgid "The status of the Celery monitoring tool, Flower"
msgstr ""

#: ../../rabbitmq_management.rst:29
msgid "How many tasks are waiting in RabbitMQ for a Celery worker to be available"
msgstr ""

#: ../../rabbitmq_management.rst:30
msgid "A list of the tasks currently being managed by Celery"
msgstr ""

#: ../../rabbitmq_management.rst:31
msgid "A list of previous tasks and their final status"
msgstr ""

#: ../../rabbitmq_management.rst:38
msgid "Figure 2: The task administration page"
msgstr ""

#: ../../rabbitmq_management.rst:41
msgid "Service statuses"
msgstr ""

#: ../../rabbitmq_management.rst:42
msgid ""
"The current status of the services necessary to execute and monitor tasks"
" is displayed in the first section of the page."
msgstr ""

#: ../../rabbitmq_management.rst:45
msgid "RabbitMQ message broker"
msgstr ""

#: ../../rabbitmq_management.rst:52
msgid ""
"Figure 3: RabbitMQ statuses: failed; running, no tasks waiting; running, "
"two tasks waiting"
msgstr ""

#: ../../rabbitmq_management.rst:54
msgid ""
"When tasks are created, they are sent to Celery to be processed via a "
"message broker, RabbitMQ. Therefore this service must be running for any "
"of the asynchronous tasks to execute - for example query-retrieve "
"operations and exports. Normal function is indicated with a green status "
"and a tick."
msgstr ""

#: ../../rabbitmq_management.rst:58
msgid ""
"When there are Celery workers available to take tasks, they will be "
"passed through immediately and the service status be green as seen in the"
" middle image of Figure 3. When all the Celery workers are busy any "
"additional tasks will be held with the RabbitMQ broker, and an option to "
"purge the queue is made available as in the bottom image in Figure 3."
msgstr ""

#: ../../rabbitmq_management.rst:63
msgid "Celery asynchronous task queue"
msgstr ""

#: ../../rabbitmq_management.rst:70
msgid "Figure 4: Celery statuses: no RabbitMQ; not running; running"
msgstr ""

#: ../../rabbitmq_management.rst:72
msgid ""
"Celery is used to manage the tasks that need to be carried out "
"asynchronously. In OpenREM, these tend to be long running tasks such as "
"exports and query-retrieve."
msgstr ""

#: ../../rabbitmq_management.rst:75
msgid ""
"If RabbitMQ is not running, we can't tell if Celery is running; this is "
"indicated by the first panel in Figure 4. If RabbitMQ is running but "
"Celery isn't, this is indicated by the middle panel in Figure 4."
msgstr ""

#: ../../rabbitmq_management.rst:78
msgid "Finally, when Celery is running a green panel with a tick is presented."
msgstr ""

#: ../../rabbitmq_management.rst:82
msgid "Flower - Celery monitoring tool"
msgstr ""

#: ../../rabbitmq_management.rst:89
msgid "Figure 5: Flower statuses: not running; running"
msgstr ""

#: ../../rabbitmq_management.rst:91
msgid ""
"Flower enables monitoring of the Celery queues so we can see what is "
"currently running, terminate if necessary, and maintain a log of previous"
" tasks and how they finished. Flower logs are reset on restart of the "
"service."
msgstr ""

#: ../../rabbitmq_management.rst:94
msgid ""
"If Flower is not running, the Flower status panel will look like the top "
"half of Figure 5. If it is running, the panel will look like the bottom "
"half of Figure 5."
msgstr ""

#: ../../rabbitmq_management.rst:99
msgid "Terminating running tasks"
msgstr ""

#: ../../rabbitmq_management.rst:101
msgid ""
"Active tasks are listed after the service status section, as seen in "
"Figure 2. The number of active tasks is limited by the number of workers "
"you have configured - see :ref:`celery_concurrency` for details."
msgstr ""

#: ../../rabbitmq_management.rst:104
msgid ""
"It is possible to terminate any running tasks by clicking the red button."
" There is no confirmation step."
msgstr ""

